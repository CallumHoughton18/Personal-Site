{"version":3,"file":"component---src-templates-blog-post-tsx-865fe78b7aabc449d181.js","mappings":"6JAoBA,EAlBuB,SAACA,GACtB,OAAsCC,EAAAA,EAAAA,WAAS,GAAxCC,EAAP,KAAoBC,EAApB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,SAASC,IACP,IAAMC,EAAkBC,OAAOC,YAE3BL,EADJG,EAAkBN,GAMpB,OAFAO,OAAOE,iBAAiB,SAAUJ,GAClCA,IACO,kBAAME,OAAOG,oBAAoB,SAAUL,MACjD,CAACL,EAAeE,IAEZA,G,UCGT,EAjByB,WAcvB,OAbeS,EAAAA,EAAAA,IAAc,eCuB/B,EAzBe,SAACC,GACd,OACE,uBACEC,UAAS,8DAAgED,EAAMC,WAE/E,uBAAKA,UAAU,sEACb,uBAAKA,UAAU,2HACb,qBACEA,UAAS,6DAA+DD,EAAME,WAArE,yBAERF,EAAMG,QAGX,uBAAKF,UAAU,+BACb,sBACEA,UAAS,2FAA6FD,EAAMI,eAE3GJ,EAAMK,cCqBnB,EAlCe,WACb,IAAMf,EAAcgB,EAAe,IAC7BC,EAAeC,IACrBD,EAAaE,KAAKC,aAAaC,UAAU,GACzC,IAAMN,EAAWE,EAAaE,KAAKC,aAAaC,UAAUC,KACxD,SAACC,EAAMC,GAYL,OAVE,sBACEC,IAAQF,EAAKG,KAAV,IAAkBF,EACrBb,UAAU,sKAGV,gBAAC,KAAD,CAAMgB,GAAIJ,EAAKA,KAAMZ,UAAU,IAC5BY,EAAKG,UAQhB,OACE,gBAAC,EAAD,CACEb,MAAM,mBACNE,SAAUA,EACVH,WAAW,iEACXE,cAAc,GACdH,UAAS,qEACPX,EAAc,kCAAoC,sB,mCCd1D,IAbuB,SAAC,GAGiB,IAFvC4B,EAEsC,EAFtCA,OACAC,EACsC,EADtCA,SAGA,OACE,gBAAC,WAAD,KACE,0BAAQlB,UAAU,wBAAwBiB,GAC1C,wBAAMjB,UAAU,uBAAuBkB,M,6DCY7C,UAfiB,SAAC,GAA0C,IACpDC,EADmD,EAAvCC,KACAC,eACZC,EAAa,IAAIC,KAAKJ,EAAKK,YAAYC,MAC7C,OACE,gBAAC,IAAD,CAAgBR,OAAQ,gBAAC,IAAD,OACtB,2BAASjB,UAAU,YACjB,wBAAMA,UAAU,SAASmB,EAAKK,YAAYtB,OAC1C,2BACA,gCAAWoB,EAAWI,gBACtB,uBAAKC,wBAAyB,CAAEC,OAAQT,EAAKU,MAAQ7B,UAAU","sources":["webpack://callums-blog/./src/hooks/useHasScrolled.ts","webpack://callums-blog/./src/hooks/useNavLinksQuery.ts","webpack://callums-blog/./src/components/navigation/NavBar.tsx","webpack://callums-blog/./src/components/Header.tsx","webpack://callums-blog/./src/components/layout/PageWithHeader.tsx","webpack://callums-blog/./src/templates/BlogPost.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useHasScrolled = (offsetFromTop: number): boolean => {\n  const [hasScrolled, setHasScrolled] = useState(false);\n\n  useEffect(() => {\n    function onScroll() {\n      const currentPosition = window.pageYOffset;\n      currentPosition > offsetFromTop\n        ? setHasScrolled(true)\n        : setHasScrolled(false);\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    onScroll();\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [offsetFromTop, hasScrolled]);\n\n  return hasScrolled;\n};\n\nexport default useHasScrolled;\n","import { SiteQueryQuery } from \"@/__autogenerated__/gatsby-graphql\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst useNavLinksQuery = (): SiteQueryQuery => {\n  const images = useStaticQuery<SiteQueryQuery>(graphql`\n    query SiteQuery {\n      site {\n        siteMetadata {\n          title\n          menuLinks {\n            name\n            link\n          }\n        }\n      }\n    }\n  `);\n  return images;\n};\n\nexport default useNavLinksQuery;\n","import React from \"react\";\n\nconst NavBar = (props: NavBarProps): JSX.Element => {\n  return (\n    <nav\n      className={`flex flex-wrap items-center justify-between px-2 py-2 mb-3 ${props.className}`}\n    >\n      <div className=\"container px-4 mx-auto flex flex-wrap items-center justify-between\">\n        <div className=\"max-h-0 max-w-0 sm:max-w-full sm:max-h-full relative flex justify-between sm:w-auto sm:static sm:block sm:justify-start\">\n          <a\n            className={`leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap ${props.titleStyle} invisible sm:visible`}\n          >\n            {props.title}\n          </a>\n        </div>\n        <div className=\"flex flex-grow items-center\">\n          <ul\n            className={`flex flex-grow sm:flex-grow-0 flex-row sm:ml-auto justify-center items-center list-none ${props.navItemsStyle}`}\n          >\n            {props.navItems}\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import useHasScrolled from \"@/hooks/useHasScrolled\";\nimport useNavLinksQuery from \"@/hooks/useNavLinksQuery\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport NavBar from \"./navigation/NavBar\";\n\nconst Header = (): JSX.Element => {\n  const hasScrolled = useHasScrolled(50);\n  const siteMetaData = useNavLinksQuery();\n  siteMetaData.site.siteMetadata.menuLinks[0];\n  const navItems = siteMetaData.site.siteMetadata.menuLinks.map(\n    (link, indx) => {\n      const navLinkJsx = (\n        <li\n          key={`${link.name}-${indx}`}\n          className=\" text-sm text-snowStorm-lightest uppercase tracking-wide font-bold py-2 ml-5 mr-5\n          hover:text-gray-300 focus:text-blueGray-300 active:text-blueGray-300 select-none\"\n        >\n          <Link to={link.link} className=\"\">\n            {link.name}\n          </Link>\n        </li>\n      );\n      return navLinkJsx;\n    },\n  );\n\n  return (\n    <NavBar\n      title=\"{ Callums.Site }\"\n      navItems={navItems}\n      titleStyle=\"text-snowStorm-lightest tracking-wide uppercase text font-bold\"\n      navItemsStyle=\"\"\n      className={`rounded-b-sm transition-colors duration-75 ease-linear text-base ${\n        hasScrolled ? \"bg-polarNight-lighter shadow-md\" : \"bg-transparent\"\n      }`}\n    ></NavBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\ntype PageWithNavBarProps = {\n  header: React.ReactNode;\n  children: React.ReactNode;\n};\n\nconst PageWithNavBar = ({\n  header,\n  children,\n}: PageWithNavBarProps): JSX.Element => {\n  //TODO: Issue here, if page is refreshed scrolled is always false\n  return (\n    <React.Fragment>\n      <header className=\"fixed z-50 inset-x-0\">{header}</header>\n      <main className=\"flex flex-col pt-12\">{children}</main>\n    </React.Fragment>\n  );\n};\n\nexport default PageWithNavBar;\n","import Header from \"@/components/Header\";\nimport PageWithNavBar from \"@/components/layout/PageWithHeader\";\nimport { MarkdownRemark } from \"@/__autogenerated__/gatsby-graphql\";\nimport { graphql } from \"gatsby\";\nimport React from \"react\";\n\ntype BlogPostProps = {\n  data: {\n    markdownRemark: MarkdownRemark;\n  };\n};\n\nconst BlogPost = ({ data }: BlogPostProps): JSX.Element => {\n  const post = data.markdownRemark;\n  const parsedDate = new Date(post.frontmatter.date);\n  return (\n    <PageWithNavBar header={<Header />}>\n      <article className=\"blogpost\">\n        <span className=\"title\">{post.frontmatter.title}</span>\n        <br />\n        <small>{`${parsedDate.toDateString()}`}</small>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} className=\"body\" />\n      </article>\n    </PageWithNavBar>\n  );\n};\n\nexport default BlogPost;\n\nexport const query = graphql`\n  query BlogQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date\n      }\n    }\n  }\n`;\n"],"names":["offsetFromTop","useState","hasScrolled","setHasScrolled","useEffect","onScroll","currentPosition","window","pageYOffset","addEventListener","removeEventListener","useStaticQuery","props","className","titleStyle","title","navItemsStyle","navItems","useHasScrolled","siteMetaData","useNavLinksQuery","site","siteMetadata","menuLinks","map","link","indx","key","name","to","header","children","post","data","markdownRemark","parsedDate","Date","frontmatter","date","toDateString","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}